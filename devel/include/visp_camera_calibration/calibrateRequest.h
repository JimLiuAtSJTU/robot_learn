// Generated by gencpp from file visp_camera_calibration/calibrateRequest.msg
// DO NOT EDIT!


#ifndef VISP_CAMERA_CALIBRATION_MESSAGE_CALIBRATEREQUEST_H
#define VISP_CAMERA_CALIBRATION_MESSAGE_CALIBRATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace visp_camera_calibration
{
template <class ContainerAllocator>
struct calibrateRequest_
{
  typedef calibrateRequest_<ContainerAllocator> Type;

  calibrateRequest_()
    : method(0)
    , sample_width(0)
    , sample_height(0)  {
    }
  calibrateRequest_(const ContainerAllocator& _alloc)
    : method(0)
    , sample_width(0)
    , sample_height(0)  {
  (void)_alloc;
    }



   typedef int32_t _method_type;
  _method_type method;

   typedef int32_t _sample_width_type;
  _sample_width_type sample_width;

   typedef int32_t _sample_height_type;
  _sample_height_type sample_height;





  typedef boost::shared_ptr< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct calibrateRequest_

typedef ::visp_camera_calibration::calibrateRequest_<std::allocator<void> > calibrateRequest;

typedef boost::shared_ptr< ::visp_camera_calibration::calibrateRequest > calibrateRequestPtr;
typedef boost::shared_ptr< ::visp_camera_calibration::calibrateRequest const> calibrateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visp_camera_calibration::calibrateRequest_<ContainerAllocator1> & lhs, const ::visp_camera_calibration::calibrateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.method == rhs.method &&
    lhs.sample_width == rhs.sample_width &&
    lhs.sample_height == rhs.sample_height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visp_camera_calibration::calibrateRequest_<ContainerAllocator1> & lhs, const ::visp_camera_calibration::calibrateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visp_camera_calibration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b57c459896a8f1f8df45a385acfc123";
  }

  static const char* value(const ::visp_camera_calibration::calibrateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b57c459896a8f1fULL;
  static const uint64_t static_value2 = 0x8df45a385acfc123ULL;
};

template<class ContainerAllocator>
struct DataType< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visp_camera_calibration/calibrateRequest";
  }

  static const char* value(const ::visp_camera_calibration::calibrateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 method\n"
"int32 sample_width\n"
"int32 sample_height\n"
;
  }

  static const char* value(const ::visp_camera_calibration::calibrateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.method);
      stream.next(m.sample_width);
      stream.next(m.sample_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct calibrateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visp_camera_calibration::calibrateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visp_camera_calibration::calibrateRequest_<ContainerAllocator>& v)
  {
    s << indent << "method: ";
    Printer<int32_t>::stream(s, indent + "  ", v.method);
    s << indent << "sample_width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sample_width);
    s << indent << "sample_height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sample_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISP_CAMERA_CALIBRATION_MESSAGE_CALIBRATEREQUEST_H
